name: Release and Deploy

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: 'patch'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  version:
    name: Calculate Version
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new-version }}
      old_version: ${{ steps.bump.outputs.old-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version
        id: bump
        uses: ./.github/actions/version-bumper
        with:
          release-type: ${{ github.event.inputs.release_type }}

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: version

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hummingbird_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Swift
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: '5.10'

      - name: Cache Swift packages
        uses: actions/cache@v4
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Build
        run: swift build --build-tests

      - name: Run tests
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: hummingbird_test
          DATABASE_USER: postgres
          DATABASE_PASSWORD: postgres
        run: swift test

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [version, test]
    permissions:
      contents: read
      packages: write
    outputs:
      image_tags: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.version.outputs.new_version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.version.outputs.new_version }}
            type=semver,pattern={{major}},value=${{ needs.version.outputs.new_version }}
            type=raw,value=latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [version, build-and-push]
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        uses: ./.github/actions/changelog-generator
        with:
          from-version: ${{ needs.version.outputs.old_version }}
          to-version: ${{ needs.version.outputs.new_version }}

      - name: Create Git Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a ${{ needs.version.outputs.new_version }} -m "Release ${{ needs.version.outputs.new_version }}"
          git push origin ${{ needs.version.outputs.new_version }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.version.outputs.new_version }}
          release_name: Release ${{ needs.version.outputs.new_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [version, build-and-push, create-release]
    # Only run deployment if you have a deployment target configured
    # Remove 'if: false' when you're ready to deploy
    if: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Example deployment to a VPS via SSH
      # Uncomment and configure when ready
      # - name: Deploy to VPS
      #   uses: appleboy/ssh-action@v1.0.0
      #   with:
      #     host: ${{ secrets.DEPLOY_HOST }}
      #     username: ${{ secrets.DEPLOY_USER }}
      #     key: ${{ secrets.DEPLOY_KEY }}
      #     script: |
      #       cd /opt/hummingbird-app
      #       docker-compose pull
      #       docker-compose up -d
      #       docker-compose exec -T app ./health-check.sh

      # Example deployment to Kubernetes
      # - name: Deploy to Kubernetes
      #   uses: azure/k8s-deploy@v4
      #   with:
      #     namespace: production
      #     manifests: |
      #       k8s/deployment.yml
      #       k8s/service.yml
      #     images: ${{ needs.build-and-push.outputs.image_tags }}

      # Example deployment to AWS ECS
      # - name: Deploy to Amazon ECS
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: task-definition.json
      #     service: hummingbird-service
      #     cluster: production-cluster
      #     wait-for-service-stability: true

      - name: Deployment Placeholder
        run: |
          echo "Deployment step - configure your deployment target"
          echo "Version: ${{ needs.version.outputs.new_version }}"
          echo "Image: ${{ needs.build-and-push.outputs.image_tags }}"

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [version, build-and-push, create-release, deploy]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Release Summary
        uses: ./.github/actions/release-notifier
        with:
          version: ${{ needs.version.outputs.new_version }}
          previous-version: ${{ needs.version.outputs.old_version }}
          release-type: ${{ github.event.inputs.release_type }}
          image-tags: ${{ needs.build-and-push.outputs.image_tags }}
          deployment-status: ${{ needs.deploy.result }}
          repository: ${{ github.repository }}

      # Optional: Slack notification
      # - name: Slack Notification
      #   uses: 8398a7/action-slack@v3
      #   if: always()
      #   with:
      #     status: ${{ job.status }}
      #     text: |
      #       Release ${{ needs.version.outputs.new_version }} (${{ github.event.inputs.release_type }})
      #       Status: ${{ job.status }}
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
